#' ---
#' prm:
#'    title: "Spatial Data Viewer"
#' pagetitle1: "`r prm$title`"
#' pagetitle: "Spatial Data Viewer"
#' output1:
#'    flexdashboard::flex_dashboard:
#'       vertical_layout: fill
#' rebuild: true
#' ---
#'
#+
toDo <- FALSE
if (length(prm <- commandArgs(TRUE))) {
   suppressMessages(plutil::ursula())
   ind <- grep("(shp|sqlite|geojson|json|dbf|csv|xlsx)",sapply(prm,spatial_fileext))
   if (length(ind)==1) {
      toDo <- TRUE
      fname <- prm[ind]
   }
}
if (!toDo)
   stop("Filename?")
#' :::bgfilename
#' `r basename(fname)`
#' :::
#'
#+ eval=toDo, echo=FALSE, include=FALSE
Sys.setenv(TZ="UTC")
da <- NULL
geom <- NULL
isGeom <- TRUE
# cat(basename(fname),":\n")
fext <- spatial_fileext(fname)
prm <- lapply(prm,\(p) {
   p2 <- strsplit(p,split="=")[[1]]
   if (length(p2)==1)
      return(list(p2))
   ret <- list(p2[2])
   names(ret) <- p2[1]
   ret
}) |> unlist(recursive=FALSE)
if (fext %in% c("csv")) {
   da <- read.csv2(fname,check.names=FALSE)
   if (dim(da)[2]==1)
      da <- read.csv(fname,check.names=FALSE)
   if (dim(da)[2]==1)
      da <- read.csv(fname,sep="\t",check.names=FALSE)
   isGeom <- FALSE
} else if (fext %in% c("xlsx")) {
   sheet <- ursa:::.getPrm(prm,name="sheet",default="")
   if (!nchar(sheet))
      sheet <- NULL
   da <- readxl::read_excel(fname,sheet=sheet,.name_repair="minimal")
   isGeom <- FALSE
} else if (fext %in% c("json","geojson")) {
   ursa:::.elapsedTime("A")
   a <- readLines(fname,encoding="UTF-8")
   if (length(grep("feature",a,ignore.case=TRUE))) {
      a <- try(jsonlite::fromJSON(a)$features,silent=TRUE)
      if (!inherits(a,"try-error")) {
         da <- a$properties
         geom <- a$geometry$type
         isGeom <- FALSE
     }
   }
  # da <- as.data.frame(rjson::fromJSON(file=fname))
   ursa:::.elapsedTime("B")
}
if (is.null(da)) {
   if (fext %in% c("json","geojson"))
      ursa:::.elapsedTime("C")
  # print(getwd())
  # print(fname)
   a <- spatialize(fname)
  # print(class(a))
   if (fext %in% c("json","geojson"))
      ursa:::.elapsedTime("D")
   if (is.null(a)) {
      isGeom <- FALSE
      if (fext=="json") {
         da <- as.data.frame(rjson::fromJSON(file=fname))
        # da <- jsonlite::fromJSON(file=fname,simplifyDataFrame=FALSE,simplifyMatrix=FALSE)
         dima <- dim(da)
         if ((dima[1]==1)&&(dima[2]>1))
            da <- jsonlite::fromJSON(fname,simplifyDataFrame=TRUE,simplifyMatrix=FALSE)
      }
      else
         da <- data.frame()
   }
   else
      da <- spatial_data(a)
}
# da <- data.frame('<entry>'=seq(nrow(da)),da,check.names=FALSE)
if (isGeom) {
   if (fext %in% c("json","geojson"))
      ursa:::.elapsedTime("E")
   g <- sapply(spatial_geometry(a),function(p) {
      if (is.matrix(p))
         return(nrow(p)+20000L)
      if (is.list(p))
         return(length(p)+30000L)
      length(p)+10000L
   })
   if (fext %in% c("json","geojson"))
      ursa:::.elapsedTime("F")
   if (length(g))
      da <- data.frame(da,'<geometry>'=paste0(spatial_geotype(a,each=TRUE)," <sup>",g,"</sup>")
                      ,check.names=FALSE)
} else if (!is.null(geom)) {
   da <- data.frame(da,'<geometry>'=geom,check.names=FALSE)
}
if (F) {
   ret <- knitr::kable(da,check.names=FALSE,row.names=TRUE,format="pandoc")
} else if (F) {
   ret <- DT::datatable(da)
} else {
   dname <- colnames(da)
   if (T & sum(nchar(dname))>100) {
      w <- rep(0,ncol(da))
      names(w) <- dname
      for (a in dname) {
         if (nchar(a)<3)
            next
         v <- na.omit(da[[a]])
         if (!length(v))
            next
         if (inherits(v,"character")) {
            w[a] <- max(unlist(lapply(strsplit(v,"\\s"),nchar)))-2
         }
         else if ((ursa:::.is.integer(v))||
                  (inherits(v,c("integer","Date","POSIXlt","POSIXct")))) {
            w[a] <- max(nchar(as.character(v)))-2
         }
         else if (inherits(v,c("numeric"))) {
            w[a] <- max(nchar(format(v)))-2
         }
      }
     # print(w)
      w[w<3] <- 3
      w[w>8] <- 8
     # print(w)
      wu <- unique(w)
      for (i in seq_along(wu)) {
        # print(data.frame(i=i,wu=wu[i]))
         j <- which(w==wu[i])
        # print(c(j=unname(j)))
         ab <- abbreviate(gsub("\\W","",tolower(dname[j])),wu[i])
         k <- which(nchar(ab)<nchar(dname[j]))
        # print(c(k=k))
        # print(ab)
         dname[j[k]] <- paste0("<abbr title=\"",dname[j[k]],"\">",ab[k],"</abbr>")
      }
      ##~ ename <- dname
      ##~ w <- lapply(unique(w))
      ##~ for (i in seq_along(dname)) {
         ##~ ab <- abbreviate(gsub("\\W","",dname[i]),w[i])
         ##~ if (nchar(ab)<nchar(dname[i]))
            ##~ dname[i] <- paste0("<abbr title=\"",dname[i],"\">",ab,"</abbr>")
      ##~ }
      colnames(da) <- dname
      for (a in dname) {
         if (!inherits(da[[a]],c("POSIXlt","POSIXct")))
            next
         if (all(format(na.omit(da[[a]]),"%H:%M:%S")=="00:00:00"))
            da[[a]] <- as.Date(da[[a]])
      }
   }
   ret <- DT::datatable(da
                       ,rownames=FALSE
                       ,escape=FALSE
                       ,extensions=c("FixedColumns","Scroller","ColReorder")[2]
                       ,options=list(NULL
                                    ,scroller=T
                                    ,scrollX=T
                                    ,scrollY="calc(100vh - 92px)" ## - 102px 117px
                                    ,scrollCollapse=TRUE
                                   # ,fixedColumns=list()
                                   # ,colReorder=F
                                    ,dom="ift"  # "Bfrtip"
                                    ,autoWidth=TRUE
                                    )
                       )
}
#+ eval=toDo, echo=FALSE, include=TRUE
if (!ursa:::.isKnitr())
   ret <- ursa:::widgetize(ret)
ret
#'
#' ```{css, eval=ursa:::.isVignette(), echo=FALSE}
#' body {
#'    font-size: 90%;
#'    max-width: calc(100vw - 40px);
#'    padding-bottom: 0.99em;
#' }
#' .table.dataTable {
#' }
#' .datatables {
#'    margin-bottom: 0.0em !important;
#' }
#' .bgfilename {
#'    position: absolute;
#'    top: 2px;
#'    left: 480px;
#'    color: #555;
#' }
#' ```
#'
